//
// Generated file, do not edit! Created by nedtool 5.6 from attacks/controlmessages/droppingAttack/NTU_DroppingMessage.msg.
//

#ifndef __NTU_DROPPINGMESSAGE_M_H
#define __NTU_DROPPINGMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>attacks/controlmessages/droppingAttack/NTU_DroppingMessage.msg:1</tt> by nedtool.
 * <pre>
 * message NTU_DroppingMessage
 * {
 *     double droppingAttackProbability; // Attack probability
 *     bool droppingUDPdata;  //
 *     bool droppingTCPdata;  //
 *     bool droppingPINGdata;  //
 * 
 * }
 * </pre>
 */
class NTU_DroppingMessage : public ::omnetpp::cMessage
{
  protected:
    double droppingAttackProbability;
    bool droppingUDPdata;
    bool droppingTCPdata;
    bool droppingPINGdata;

  private:
    void copy(const NTU_DroppingMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NTU_DroppingMessage&);

  public:
    NTU_DroppingMessage(const char *name=nullptr, short kind=0);
    NTU_DroppingMessage(const NTU_DroppingMessage& other);
    virtual ~NTU_DroppingMessage();
    NTU_DroppingMessage& operator=(const NTU_DroppingMessage& other);
    virtual NTU_DroppingMessage *dup() const override {return new NTU_DroppingMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getDroppingAttackProbability() const;
    virtual void setDroppingAttackProbability(double droppingAttackProbability);
    virtual bool getDroppingUDPdata() const;
    virtual void setDroppingUDPdata(bool droppingUDPdata);
    virtual bool getDroppingTCPdata() const;
    virtual void setDroppingTCPdata(bool droppingTCPdata);
    virtual bool getDroppingPINGdata() const;
    virtual void setDroppingPINGdata(bool droppingPINGdata);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NTU_DroppingMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NTU_DroppingMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __NTU_DROPPINGMESSAGE_M_H

