//
// Generated file, do not edit! Created by nedtool 5.6 from attacks/controlmessages/floodingAttack/NTU_FloodingM.msg.
//

#ifndef __NTU_FLOODINGM_M_H
#define __NTU_FLOODINGM_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>attacks/controlmessages/floodingAttack/NTU_FloodingM.msg:1</tt> by nedtool.
 * <pre>
 * message NTU_FloodingM
 * {
 *     bool isHelloFlooding;
 *     bool isRreqFlooding;
 *     bool isDataFlooding;
 *     double Interval_HelloFlooing;
 *     double Interval_RreqFlooing;
 *     double Interval_DataFlooing;
 * }
 * </pre>
 */
class NTU_FloodingM : public ::omnetpp::cMessage
{
  protected:
    bool isHelloFlooding;
    bool isRreqFlooding;
    bool isDataFlooding;
    double Interval_HelloFlooing;
    double Interval_RreqFlooing;
    double Interval_DataFlooing;

  private:
    void copy(const NTU_FloodingM& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NTU_FloodingM&);

  public:
    NTU_FloodingM(const char *name=nullptr, short kind=0);
    NTU_FloodingM(const NTU_FloodingM& other);
    virtual ~NTU_FloodingM();
    NTU_FloodingM& operator=(const NTU_FloodingM& other);
    virtual NTU_FloodingM *dup() const override {return new NTU_FloodingM(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual bool getIsHelloFlooding() const;
    virtual void setIsHelloFlooding(bool isHelloFlooding);
    virtual bool getIsRreqFlooding() const;
    virtual void setIsRreqFlooding(bool isRreqFlooding);
    virtual bool getIsDataFlooding() const;
    virtual void setIsDataFlooding(bool isDataFlooding);
    virtual double getInterval_HelloFlooing() const;
    virtual void setInterval_HelloFlooing(double Interval_HelloFlooing);
    virtual double getInterval_RreqFlooing() const;
    virtual void setInterval_RreqFlooing(double Interval_RreqFlooing);
    virtual double getInterval_DataFlooing() const;
    virtual void setInterval_DataFlooing(double Interval_DataFlooing);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NTU_FloodingM& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NTU_FloodingM& obj) {obj.parsimUnpack(b);}


#endif // ifndef __NTU_FLOODINGM_M_H

